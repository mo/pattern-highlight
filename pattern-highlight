#!/usr/bin/env python3

import os
import re
import sys
import argparse

import tcolorlib

def rgb_to_ansi(rgb, background=False):
    if args.ansi256:
        return tcolorlib.rgb_to_ansi_256colors((rgb[0], rgb[1], rgb[2]), background)
    else:
        return tcolorlib.rgb_to_ansi_truecolor((rgb[0], rgb[1], rgb[2]), background)

def highlight(all_patterns, line):
    line_colors = ""
    for pattern in all_patterns:
        if pattern["kind"] == 'foreground-line' and re.search(pattern["param"], line):
            line_colors += rgb_to_ansi(pattern["rgb_color"])
        elif pattern["kind"] == 'background-line' and re.search(pattern["param"], line):
            line_colors += rgb_to_ansi(pattern["rgb_color"], background=True)
    for pattern in all_patterns:
        if pattern["kind"] == 'foreground':
            line = re.sub(pattern["param"], rgb_to_ansi(pattern["rgb_color"]) + "\g<0>" + (line_colors or tcolorlib.ANSI_RESET_COLOR), line, count=0)
        elif pattern["kind"] == 'background':
            line = re.sub(pattern["param"], rgb_to_ansi(pattern["rgb_color"], background=True) + "\g<0>" + (line_colors or tcolorlib.ANSI_RESET_COLOR), line, count=0)
        elif pattern["kind"] == 'foreground-colnum':
            target_col_index = pattern["param"] - 1
            cols = line.split(" ")
            if target_col_index < len(cols):
                cols[target_col_index] = rgb_to_ansi(pattern["rgb_color"]) + cols[target_col_index] + (line_colors or tcolorlib.ANSI_RESET_COLOR)
                line = ' '.join(cols)
        elif pattern["kind"] == 'background-colnum':
            target_col_index = pattern["param"] - 1
            cols = line.split(" ")
            if target_col_index < len(cols):
                cols[target_col_index] = rgb_to_ansi(pattern["rgb_color"], background=True) + cols[target_col_index] + (line_colors or tcolorlib.ANSI_RESET_COLOR)
                line = ' '.join(cols)
    if line_colors:
        return line_colors + line.strip("\n") + tcolorlib.ANSI_RESET_COLOR + "\n"
    else:
        return line

def load_patterns(args):
    def load(color, param, kind):
        rgb_color = tcolorlib.webcolor_to_rgb(color)
        if not rgb_color:
            print("ERROR: invalid color '%s'" % color)
            sys.exit(1)
        all_patterns.append({
            "param": param,
            "kind": kind,
            "rgb_color": rgb_color
        })

    all_patterns = []
    for (color, regex) in args.color_pattern:
        load(color, regex, "foreground")
    for (color, regex) in args.bgcolor_pattern:
        load(color, regex, "background")
    for (color, regex) in args.color_pattern_line:
        load(color, regex, "foreground-line")
    for (color, regex) in args.bgcolor_pattern_line:
        load(color, regex, "background-line")
    for (color, colnum) in args.color_colnum:
        load(color, int(colnum), "foreground-colnum")
    for (color, colnum) in args.bgcolor_colnum:
        load(color, int(colnum), "background-colnum")
    return all_patterns

def set_color_support_defaults():
    try:
        issue = open("/etc/issue").read()
        if "Ubuntu 14.04" in issue:
            # gnome-terminal supports true color by default but it needs to be
            # linked to libvte >= 0.36 which isn't the case for ubuntu 14.04
            args.ansi256 = True
    except:
        pass

def main():
    set_color_support_defaults()
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'wb', 0)

    all_patterns = load_patterns(args)
    sys.stdout.write(tcolorlib.ANSI_RESET_COLOR.encode())
    while True:
        line = sys.stdin.readline()
        if not line:
            break

        line = highlight(all_patterns, line)

        sys.stdout.write(line.encode())

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument("--color-pattern", nargs=2, metavar="PARAM", help="first param is COLOR, second param is REGEX", action='append', default=[])
        parser.add_argument("--bgcolor-pattern", nargs=2, metavar="PARAM", help="first param is COLOR, second param is REGEX", action='append', default=[])
        parser.add_argument("--color-pattern-line", nargs=2, metavar="PARAM", help="first param is COLOR, second param is REGEX", action='append', default=[])
        parser.add_argument("--bgcolor-pattern-line", nargs=2, metavar="PARAM", help="first param is COLOR, second param is REGEX", action='append', default=[])
        parser.add_argument("--color-colnum", nargs=2, metavar="PARAM", help="first param is COLOR, second param is COLNUM", action='append', default=[])
        parser.add_argument("--bgcolor-colnum", nargs=2, metavar="PARAM", help="first param is COLOR, second param is COLNUM", action='append', default=[])
        parser.add_argument("--ansi256", help="fallback to 256 color mode (useful if your terminal doesn't support ANSI escape codes for proper RGB colors)")
        args = parser.parse_args()
        sys.exit(main())
    except KeyboardInterrupt:
        pass
